// ####################### 1교시 시작 ####################### //
※ Python 개요
	1990년 탄생
	파이썬(Python)은 1991년 프로그래머인 귀도 반 로섬(Guido van Rossum)이 발표한 고급 프로그래밍 언어로, 플랫폼 독립적이며 인터프리터식, 객체지향적, 동적 타이핑(dynamically typed) 대화형 언어이다.

	파이썬은 동적 타이핑을 지원하는 인터프리트 언어이다.

0. 왜 파이썬(Python)인가?
	- 읽기 쉽고 (구현하기도 쉽다)
	- 빠르고 (속도라는건 개발속도가 빠르다)
	- 다목적

1. 파이썬 개요 및 설치
	1.1. 파이썬 활용
		- 배우기 쉬운 교육용 프로그래밍 언어
		- 쉘 스크립트와 배치프로그램 대안
		- 데이터 과학자가 되려면 필수
		- 웹 서버 어플리케이션 - Django, Flask(프레임웍)
		- 개인과 팀 단위의 업무 자동화

	1.2. 파이썬 활용
		- 파일 및 디렉토리 정리 작업
		- 엑셀파일 및 CSV 파일 작업 자동화
		- 웹에서 데이터 가져와서(스크레이핑) 정리작업 자동화
		- 웹 서비스를 활용하여 데이터 수집 및 정리작업 자동화
		- 비정형 데이터(주로 텍스트 데이터)에서 특정 데이터 검색
		- 반복되는 메일 보내기 작업 자동화
		- 메일을 통화 업무 작업화

	1.3. 파이썬 특징
		- 가독성 (문법이 간결하고 들여쓰기를 기반으로 가독성이 좋음)
		- 풍부한 라이브러리를 바탕으로 무궁한 확장성
		- 접착성 (C로 구현된 모듈을 쉽게 만들어 붙일 수 있음, 반대 기능도 가능함)
		- 유니코드 (문자열이 모두 유니코드로 나타남)
		- 동적 타이핑 (Dynamic Language, Interpreted Language)

	1.4. 파이썬 인터프리터 설치 - www.python.org
		- 설치경로 (유닉스 계열)	-> /usr/local/bin/python3.5
		- 윈도우 -> c:\Python35 (set path=%path%;c:\pythone35)

	1.5. 파이썬 툴
		- 아톰
		- 젯브레인 (PyCharm) -> IntelliJ IDEA 만든회사
			유료인 프로페셔널 에디션과 무료인 커뮤니티 에디션이 있음 (IDE - 개발용 툴)
			  -> https://www.jetbrains.com/pycharm/download

	1.6. 파이썬 Think Point
		파이썬은 개인적 업무 자동화 용도로 사용하기 적합한 프로그래밍 언어입니다.
		반복적이고 지루한 개인업무를 파이썬으로 자동화 해봅시다.
// ####################### 1교시 종료 ####################### //


// ####################### 2교시 시작 ####################### //
※ Python 숫자다루기
	1. 숫자형 타입(Numbers)
		변수를 만들고 값을 항당
		Python Console
			a = 1
			b = 3.14
			pritn(a)
			type(b)

	2. 산술 연산
		- 덧셈
			3 + 5 => 8
		- 뺄셈
			10 - 5 => 5
		- 곱셈
			3 * 5 => 15
		- 나눗셈 (정수끼리 나눠도 실수/float 형태로 나온다)
			10 / 6 => 1.6666666666666667
		- 제곱
			2 ** 3 => 8
		- 음수
			-2 + -3 => -5

	3. 변수명
		- 변수의 타입을 지정하지 않음
		- 문자, 숫자, 밑줄(_)을 포함 가능, 숫자는 처음에 올 수 없음
		- 예약어는 변수명으로 사용할 수 없음 (아래 예약어)
			And, as, assert, break, class, continue, def, del, elif, else, except, is,
			finally, for, from global, if, import, in, lambda, nonlocal, not, or, pass, raise,
			return, try, thile, with, yield 등

		!!! PEP8 스타일 가이드를 따르자
		파이썬 개선 제안서 (Pythone Enhancement Proposal) #8
		https://www.python.org/dev/peps/pep-0008

		ex) 항공료 구하는 예제
			flight_fee = 300000	// 30만원
			num_of_adult = 2		// 성인 2명

			flight_fee * num_of_adult	// 결과

		4. 변수
			- 객체(값)를 저장하는 메모리 공간
			- 변수에 객체가 바인딩 됨
				>>> x = 100
				>>> id(x)		// 메모리 주소 나옴
					(123123121)
				>>> x = 10000
				>>> y = 10000
				>>> id(x), id(y)
					(231231231, 124141444)

		5. 파이썬에서 모든 자료 타입은 객체임 - 변수의 타입은 변하지 않음
			http://pythontutor.com (메모리상 어떻게 위치하는지 비주얼하게 보여줌)
			>>>
				a = 3
				b = 3.14
				c = a + b
				d = [1,2,3]			// 리스트
				e = {'a': 123}	// 딕셔너리

		6. 싱글 라인 주석
			# 샵 문자 이후의 모든 내용은 주석처리 되어 인터프리터에 의해 읽혀지지 않음!
			- 주석은 코드의 문서화의 의미로 코드 가독성을 향상시키고 품질과 생산성을 향상시킴
			- 주석에 대한 표준을 전체 프로젝트 표준으로 설정 필요

		7. 멀티 라인 주석 - docstring 이라고 함
			"""
				Hello, how are you?
				작성일 : 2017.11.04
				작성자 : kang.deokjoon
			"""
			- 싱글 라인 주석에 비해 여러 줄의 주석을 사용할 때 사용
			- 세개의 따옴표 사이에 들어가는 모든 문자(숫자 포함, 공백 포함)는 주석처리 됨
			- 모든 모듈, 클래스, 함수에 docstring 포함 (PEP8 스타일 가이드)
				- http://pep8.org

		8. (연습문제) 파이썬으로 계산하기
			- 여행을 떠나요 미국으로!
				문제1. 비행기 예약 - 4인가족 (성인 2명, 소아1명, 유아1명)
				문제2. 인천 - 샌프란시스코 왕복 954,200원 (유아는 10% 차지)
				문제3. 호텔 예약 (5박) - 1박에 $125.00
							(resort fee $45.00 + tax는 5.5%추가)
				문제4. 달러 환전 - 3,000불 (금일 환율 1달러에 1,147) + 은행수수료 0.45%
				문제5. 첫날 저녁 식대 - $135.52 (tax 6.75% + tip 15%)
				문제6. 주차비 - 최초 30분 $2.50 매 15분 마다 $1.25씩 추가
				문제7. 3시간 20분 주차했을 때 주차비 계산

		9. Python, java, javascript의 int형의 차이
			파이썬3에서의 int타입은 범위 제한이 없다.
			자바와 자바스크립트는 32비트 정수형을 사용한다.

		10. 학습정리
			- 정수는 int타입, 소숫점이 있는 숫자는 float타입으로 표현된다.
			- 변수는 자기 설명적으로 의미있는 단어로 작성한다.

// ####################### 2교시 종료 ####################### //

// ####################### 3교시 시작 ####################### //
※ 문자다루기
	0. 사전퀴즈
		- 숫자와 문자를 결합할 수 있다?
			숫자와 문자를 결합할 수 없다.
			int() 함수를 통해 숫자로 변환하거나 str()함수로 문자로 변환해서 결합연산을 수행한다.
		- 문자열을 나타내는 기호는 "" 와 '' 두가지 모두 사용할 수 있다?
			>>> 두가지 기호를 모두 사용해서 문자열을 나타낼 수 있으며, 주로 외따옴표(')를 사용하여 문자열을 표시한다.

	1. 문자다루기
		- 문자열 결합 : + (산술연사자중 결합연산자 역할)
		- 문자열 복제 : *
			: * 연산자를 이용하여 문자열 복제 가능
				>>> greet = 'Hello ' * 4 + '\n'
				>>> end = 'Goodbye.'
				>>> print(greet + greet + end)
		- 이스케이프 문자
			\n	개행(줄바꿈)
			\t	탭
			\r	캐리지 리턴
			\0	널(null)
			\\	문자 \
			\'	단일 인용부호
			\"	다중 인용부호
			ex)
			>>> print('\tabc')
				abc
		- 데이터 타입 변환 : str()
			str() 함수를 사용하여 데이터 타입을 문자열로 변환 가능
			> int(), float()는 마찬가지로 각각 int와 float로 변환한다.
				ex)
					>>> str(96.7)
						'96.7'
					>>> str(1.0e4)
						'10000.0'
					>>> str(True)
						'True'
		- 문자열 인덱스(오프셋)
			greeting = 'HELLO WORLD!'	// 오프셋이 단어하나씩 지정된다.

		- 문자 추출
			>>> greeting[0]
				'H'
			>>> greeting[11]
				'!'
			>>> greeting[12]
				IndexError : string index...

		- 문자열 자르기 (slicing)
			>>> mysting = 'hello world'
			>>> mystring[0:5]
				'hello'
			>>> mystring[6:11]
				'world'
			>>> mystring[6:]	// 6번째부터 마지막까지
				'world'
			>>> mystring[:5]	// 처음부터 5번째까지

			[0][1][2][3][4][5]
				시작경계는 포함되나 끝경계는 미포함되니 유의하면서 코딩필요
				>>> mystring[2:5] 이거하면 2~4까지만 나온다.

		- 문자열 자르기 : 음수 인덱스 사용
			>>> letters[-3:]		// 뒤에서 3번쨰부터 끝까지
			>>> letters[18:-3]	// 18번째 인덱스부터 뒤에서 3번째 까지
			>>> letters[-6:-3]	// 뒤에서 6번쨰부터 뒤에서 3번쨰 까지
		- 문자열 길이 : len()
			문자열의 길이를 잰다.
			다른 시퀀스 타입에서도 사용 가능하다. (시퀀스 : 순서가 있는 데이터의 모임)

	10. 연습문제
		사용자 이름을 입력받아 이메일 주소를 만들어 주는 프로그래밍
			- input() 함수 사용 : 콘솔로 부터 문장을 입력받는 함수
				순서1. 아이디를 입력하라고 메시지를 보내고 사용자 입력을 기다린다.
				순서2. 사용자가 아이디를 입력하면 아이디에 '@python_demo.co.kr' 문자열을 결합한다.
				순서3. 결합한 후 완성된 이메일 표시해준다.

	11. URF-8 문자 인코딩 방식에 대해서 알아보세요.
		UTF-8 인코딩은 유니코드 한 문자를 나타내기 위해 1바이트에서 4바이트까지를 사용한다.
		예를 들어서, U+0000부터 U+007F범위에 있는 ASCII문자들은 UTF-8에서 1바이트만으로 표시된다.
		4바이트로 표현되는 문자는 모두 기본 다국어 평면(BMP) 바깥의 유니코드 문자이며, 거의 사용되지 않는다.
		UTF-16과 UTF-8중 어느 인코딩이 더 적은 바이트를 사용하는지는 문자열에서 사용된 코드 포인트에 따라 달라지며,
		실제로 DEFLATE와 같은 일반적인 압축 알고리즘을 사용할 경우 이 차이는 무시할 수 있을 정도이다.
		이러한 압축 알고리즘을 사용하기 힘들고 크기가 중요할 경우 유니코드 표준 압축 방식
		(Standard Compression Scheme for Unicode)을 대신 사용할 수 있다.

	12. 학습정리
		- 문자열 인덱스(오프셋)를 통해 문자열 내의 각각 문자에 접근 할수 있다.
		- 시작과 끝 경계를 주어 문자열을 슬라이싱(자르기)을 할수 있다.
// ####################### 3교시 종료 ####################### //

// ####################### 4교시 시작 ####################### //
※ 리스트
	0. 파이썬에서 리스트는 원하는 모든 데이터를 담는 컨테이너
		- Read-Only 리스트 - 튜플(Tuples)
		- 위 두 가지 모두 시퀀스 구조의 컨테이너이다.
			# an empty list
			empty = []
			# list of numbers
			nums = [10, 20, 30, 40.5]
			# list of strings
			words = ['aaa', 'bbb', 'ccc']
			# list of mixed items
			anything = [10, 'aaaa', 123.45]

	1. 리스트의 아이템은 0부터 시작하는 인덱스(또는 오프셋이라고 함)로 순서를 가진다.
		- 오프셋으로 데이터를 추출 또는 변경이 가능
		- insert(offset, data) 함수를 통해 데이터 변경도 가능
		- append(data) 함수로 데이터를 마지막에 추가
		ex)
			greeting[0]
			greeting[3]
			greeting[1,4]

	2. 오프셋으로 아이템 얻기
		>>> address = ['seoul', 'seocho', 'woomyun']
		>>> address[2]
				'woomyun'
		>>> address[-1]
				'seocho'

	3. 오프셋으로 아이템 바꾸기(write)
		>>> phone_number = ['010', '1234', '5678']
		>>> phone_number[1] = '2346'
		>>> phone_number
			['010', '2346', '5678']

	4. 아이템 삭제
		- 리스트에서 아이템 삭제는 값과 인덱스 모두 가능하다.
		slang = ['aaa', 'bbb', 'ccc', 'ddd', 'eee']

		slang.remove('bbb')	// 값으로 삭제
		del slang[3]				// 인덱스로 삭제
		del slang[:2]				// 처음부터 2번째까지 삭제 (범위삭제도 가능)

	5. 슬라이스로 아이템 추출
		- 슬라이스로 리스트의 서브시퀀스를 추출할 수 있다.
			>>> address = ['seoul', 'seocho', 'woomyun']
			>>> address[0:2]
				['seoul', 'seocho']

		- 리스트 아이템 추가 : append()
			>>> address.append('123-54')
			>>> address
				['seoul', 'seocho', 'woomyun', '123-54']

		- 오프셋과 inser()로 항목 추가
			>>> address.insert(3, 'san')
			>>> address
				['seoul', 'seocho', 'woomyun', 'san', '123-54']

		- 다른 데이터 타입을 리스트로 변환 : list()
			>>> list('cat')
				['c', 'a', 't']

		- 문자열을 구분자(delimiter)로 나누어서 리스트로 변환 : split()
			>>> birthday = '1983/01/01'
			>>> birthday.split('/')
				['1983', '01', '01']

		- 값으로 오프셋 찾기 : index()
			>>> address = ['seoul', 'seocho', 'woomyun', '123-54']
			>>> address.index('seocho')
				1

		- 멤버십 확인 : in
			리스트의 멤버(아이템) 인지 확인하려면 in을 사용
				>>> address = ['seoul', 'seocho', 'woomyun', '123-54']
				>>> 'seocho' in address
					True
				>>> 'gangnam' in address
					False

		- 값 세기 : count()
			리스트에 특정 값이 얼마나 있는지 세기 위해서 count() 함수 사용
				>>> address.count('seocho')
					1
				>>> address.count('gangnam')
					0

		- 튜플 (Tuples)
			# 튜플 생성
			empty_tuple = ()
			colors = 'red', 'green', 'blue', 'yellow'	# 정의할 땐 괄호 붙이지 않음

			# 여러 변수에 값을 할당 할 수 있음
			a, b, c, d = colors	# aka 'Tuple unpacking'

			# 리스트를 튜플로 변환
			>>> lang_list = ['swift', 'javascript', 'python']
			>>> duple(lang_list)
				('swift', 'javascript', 'python')

		!!. 튜플 (Tuples)
			- 튜플은 더 적은 공간을 사용한다. (리스트보다 메모리를 적게 사용하고 속도가 빠르다)
			- 실수로 튜플의 항목이 손상될 염려가 없다.
			- 함수의 파라미터들은 튜플로 전달된다.

		10. 연습문제
			- 색상 이름을 아이템으로 가지는 리스트를 작성하세요 (색상 최소 5개 이상)
				문제1. 리스트의 아이템 개수를 출력하세요
				문제2. 리스트의 가장 마지막 아이템의 첫 번째 글자를 대문자로 변경해서 출력하세요.

		!!!
			파이썬 컬렉션에서 리스트와 딕셔너리 그리고 집합(셋)이 있습니다.
			각 데이터 타입은 약간씩 변형된 파생형 타입을 갖고 있습니다.
			사용할 데이터의 구조에 맞게 컬렉션을 사용하는 것은 중요합니다.
			파이썬은 이외에도 외부모듈 형태로 다양한 형태의 컬렉션을 지원하고 있어
			다차원의 숫자나 복잡한 구조의 데이터를 다룰때 유용하여 많은 데이터 과학자들이 파이썬을 솔루션으로 사용하고 있습니다.

		!!! 학습정리
			- 리스트와 튜플은 순서있는 데이터를 저장하는 데이터 구조이다.
			- 리스트 관련 함수를 이용해서 리스트를 조작할 수 있다.
			-튜플은 아이템 수정이 불가한 리스트이며, 속도가 빠르다.

// ####################### 4교시 종료 ####################### //





// ####################### 5교시 시작 ####################### //
※ 딕셔너리 - Dictionary - 키/값 쌍으로 데이터를 관리
	- 리스트와 유사하지만 인덱스 대신에 키를 통해 값을 찾는다.
		slang = {'cheerio':'goodby', 'knackered':'tired', 'yonks':'ages'}

	- java : 맵, 해쉬맵

	1. 딕셔너리 생성
		- 빈 딕셔너리 만들기
			slang = {}

		- 빈 딕셔너리 아이템 추가
			slang['cheerio'] = 'goobye'	// Dictionary에 키/값 쌍으로 된 아이템을 추가

		- 아이템 업데이트
			slang['smashing'] = 'awesome'

			있으면:insert, 없으면:update

		- 아이템 삭제
			del slang['cheerio']	# 키워드를 사용해서 삭제

		- 모든 항목 삭제 : clear()
			>>> slang.clear()

		- 찾고자 하는 값이 없을 떄
			# get()으로 값을 찾음
			>>> result = slang.get('bloody')
			>>> print(result)
				NONE	# 값이 없다는 뜻

		- None은 데이터가 없다는 뜻, 조건식에서 False와 같다.
			slang = {'cheerio':'goodby', 'knackered':'tired', 'yonks':'ages'}
			result = slang.get(bloody')

			if result:
				print(result)
			else:		# Otherwise
				print('Key doesn't exist')

		- 딕셔너리로 변환 : dict()
			>>> lol = [['a', 'b'], ['c', 'd'], ['e', 'f']]	# list of list
			>>> dict(lol)
				{'c': 'd', 'a': 'b', 'e': 'f'}

			>>> los = ['ab', 'cd', 'ef']	# list of string
			>>> dict(los)
				{'c': 'd', 'a': 'b', 'e': 'f'}

			>>> tos = ('ab', 'cd', 'ef')	# tuple of string
			>>> dict(tos)
				{'c': 'd', 'a': 'b', 'e': 'f'}

		- 딕셔너리에 키가 있는지 테스트
			>>> pythons = {'Chapman': 'Graham', 'Cleese': 'John', 'Johns': 'Terry', 'Palin': 'Michael'}
			>>> 'Chapman' in pythons	# 멤버쉽테스트 in은 딕셔너리에 해당 키가 있는지 확인하는 연산자이다.
				True
			>>> 'Palin' in pythons
				True
			>>> False

		- 모든 키 가져오기 : keys()
			>>> signals = 'greeen': 'go', 'yellow': 'go faster', 'red': 'stop}
			>>> signals.keys()
			dict_keys(['green', 'yellow', 'red'])

		- 모든 값 가져오기 : values()
			>>> signals.values()
			dict_values(['go', 'go faster', 'stop'])

		- 모든 키 - 값 쌍 가져오기 : items()
			>>> signals.items()
			dict_items([('green', 'go'), ('yellow', 'go faster'), ('red', 'stop')])

		- 연습문제
			다음 데이터를 리스트와 딕셔너리를 사용하여 작성하세요.
			1. 각 로우(행)를 딕셔너리로 표현한다.
				{'id': '1', 'name': 'hone kildong', 'email': 'hone@mail.com', 'hp_num': '010-2343-9870'},

			2. 4개의 딕셔너리를 포함한 리스트를 만든다.
				addresses = [
						{'id': '1', 'name': 'hone kildong', 'email': 'hone@mail.com', 'hp_num': '010-2343-9870'},
						{'id': '2', 'name': 'lee soosin', 'email': 'lee@mail.com', 'hp_num': '010-3333-5555'},
						{'id': '3', 'name': 'jang youngsil', 'email': 'jang@mail.com', 'hp_num': '010-7777-1234'},
						{'id': '4', 'name': 'king sejong', 'email': 'king@mail.com', 'hp_num': '010-8888-0987'},
				]

				addresses_new = {
						'1': {'name': 'hone kildong', 'email': 'hone@mail.com', 'hp_num': '010-2343-9870'},
						'2': {'name': 'lee soosin', 'email': 'lee@mail.com', 'hp_num': '010-3333-5555'},
						'3': {'name': 'jang youngsil', 'email': 'jang@mail.com', 'hp_num': '010-7777-1234'},
						'4': {'name': 'king sejong', 'email': 'king@mail.com', 'hp_num': '010-8888-0987'},
				}

		- 키/값 쌍으로 데이터를 처리하는 사례를 주변에서 찾아보세요.
			키는 유일한 값이 되어야하고, 그 키에 데이터를 바인딩해서 간단한 키로 데이터를 찾아오는 방식,
			예를들어 주민번호를 통해 주민의 정보를 찾을 수 있다. 키는 유일하고 중복되지 않아야한다.
			데이터베이스도 키/값 을 저장할 수 있는 데디스(Redis) 같은 DB도 많이 사용되고 있다.
			서버에서 사용자 인증을 위한 정보를 저장하는 세션도 키/값 타입으로 데이터를 사용한다.

		- 학습정리
			딕셔너리는 키/값 쌍으로 구성된 데이터 구조이다.
			딕셔너리의 아이템 끼리는 순서가 없다.
			엑셀의 표형 데이터를 딕셔너리 형태로 변경할 수 있다.

// ####################### 5교시 종료 ####################### //

// ####################### 6교시 시작 ####################### //
※ 코드구조1
	if문, 비교연산자와 논리연산자

	- 흐름 제어 (Flow Control)
		구조적 프로그래밍 : 순차구조, 선택구조, 반복구조로 이루어짐

	- bool 타입 (True: 참, False: 거짓)

	- 비교 연산자 (Comparison Operators)
		<, <=, ==, >=, >, !=

	- 논리 연산자
		결과는 True와 False
		and 와 or
		not

	- if - 조건문 (Conditional)

	- if ~ elif ~ else 다중 구문

	- True 와 False
		다음 값은 모두 Flase이다

		=====================
		요소					|| False
		=====================
		null				|| None
		int 타입 0		|| 0
		float 타입 0	|| 0.0
		빈 문자열			|| ''
		빈 리스트			|| []
		빈 튜플				|| ()
		빈 딕셔너리			|| {}

	- 간단한 단어 번역기 만들기 - 단어 첫 글자를 마지막으로 옮기고 'ay'를 추가
		단어 하나를 입력 받는다. (input() 함수 사용)
		공백을 입력하거나 글자가 아닌 것을 입력했을 때 "invalid word!"라고 출력
		입력된 단어를 수정하여 완성된 글자를 출력

	- for 문
		0부터 10까지 출력하기
		for i in [0,1,2,3,4,5,6,7,8,9,10]:
			print(i)

		for i in range(0, 11):
			print(i)

	- for 와 list (list는 tuple로도 가능, 속도가 더 빠름)
		favorite_hobby = ['reading', 'fishing', 'shopping']
		for hobby in favorite_hobby:
			print('%s is my favorite hobby' % hobby)

	- for 와 dictionary
		wish_travel_city = {'bangkok': 'Thai', 'Los Angeles': 'USA', 'Manila': 'Philiphines'}
		for city, country in wish_travel_city.items():
			print('%s in %s' % (city, country))

	- for 루프 - 리스트의 각 아이템을 순화
		====================================================
		prices = [2.50, 3.50, 4.50]

		for price in prices:
			print('Price is', price)
		====================================================
		import random

		for i in range(10):
			ticket = random.randint(1, 1000)
			print(ticket)
		====================================================
		import random
		r1 = random.random()
		print(r1)

		r2 = random.choice([1,2,3,4,5])
		print(r2)

		r3 = random.randint(1, 1000)
		print(r3)
		====================================================

	- True와 False의 두가지 상태를 가지는 컬bool 타입에 대해서 알아보세요.
		위키백과 참조: https://ko.wikipedia.org/wiki/불린_자료형

	99. 학습정리
		- 코드의 흐름제어는 분기분과 반복문으로 구분된다.
			분기문은 if문으로 반복문은 for문으로 제어할 수 있다.

		- 파이썬 데이터 타입으로 참과 거짓을 표현할 수 있는 bool타입이 있고,
			각각 True, False 키워드로 표현된다.

		- 불값을 결과로 가지는 연산자로 비교연산자와 논리연산자가 있다.


// ####################### 6교시 종료 ####################### //

// ####################### 7교시 시작 ####################### //
※ 코드구조2
	num = 0
	while num <= 10
		if num % 2 == 1:
			print(num)
		num += 1
	====================================================
	num = 1
	while 1:
		print(num)
		if num == 10:
			break		# continue?
		num += 1

	- zip() 함수를 사용하여 여러 시퀀스 병렬로 순회하기
		여러 시퀀스 중 가장 짧은 시퀀스가 완료되면 zip()은 멈춘다.
		>>> days = ['Monday', 'Tuesday', 'Wednesday']
		>>> fruits = ['1', '2', '3']
		>>> drinks = ['11', '22', '33', '44']
		>>> for day, fruit, drink in zip(days, fruits, drinks):
			print(day, ": drink", drink, "- eat", fruit, "- enjoy"...

	- zip() 함수를 사용하여 여러시퀀스 병렬로 순회하기
		여러 시퀀스 중 가장 짧은 시퀀스가 완료되면 zip()은 멈춘다.
		>>> days = ['Monday', 'Tuesday', 'Wednesday']
		>>> fruits = ['1', '2', '3']
		>>> drinks = ['11', '22', '33', '44']

		>>> list(zip(days, fruits))
			[('Monday', '1'), ('Tuesday', '2'), ('Wednesday', '3')]

		>>> dict(zip(days, fruits))
			{'Monday': '1', 'Tuesday': '2', 'Wednesday': '3'}

	- 숫자 시퀀스 생성하기 : range()
		리스트나 튜플을 사용하여 저장하지 않더라도 특정 범위의 숫자 시퀀스를 생성한다.
		>>> for x in range(0, 3):		# 0,1,2
			print(x)

		>>> list[range(0,3)]

	- zip(), range()와 같은 함수는 순회 가능한 (iterable) 객체를 반환한다.
		for .. in 형태로 값을 순회할 수 있다.
		객체를 리스트와 같은 시퀀스로 변환할 수 있다.
		>>> for x in range(2, -1, -1):			# 2부터 -1까지 -1씩 증가한다.
			print(x)

		>>> for x in range(0, 11, 2):				# 0부터 10까지 2씩 증가한다.
			print(x)

		>>> list(range(2000, 2016, 2)				# 2000부터 2016까지 2씩 증가하는 리스트를 만든다.

	- 딕셔너리에 값을 추가하려고 할 때 해당 키가 없으면 추가하는 코드
		spam = {'name': 'Pooka', 'age': 5}
		if 'color' not in spam:
			spam['color'] = 'blank'

	- setdefault()는 해당 키가 없으면 추가
		>>> spam = {'name': 'Pooka', 'age': 5}
		>>> spam.setdefault('color', 'black')
			'black'

		>>> spam
			{'color', 'black', 'name': 'Pooka', 'age': 5}

		>>> spam.setdefault('color', 'white')
			'blank'

	- Exercise : 문장 속에 나타나는 문자 개수를 카운팅해서 딕셔너리 형태로 표현
		문장 : message = 'It was a bright cold day in April, and the clocks were striking thirteen.'

		결과
			{' ': 13, ',': 1 ....... 'y': 1}

	- 과제 @@@
		# random module
		import random


		counter = {}
		for i in range(10000):
				print(i, ' : ', random.randint(1, 6))
				counter = counter.setdefault(i, 0) + 1

		# 만번 돌려서 1~6까지 몇번 나왔는지 확인 딕셔너리로 만들어라@@@@


	- 코드를 순차적 수행, 분기, 반복으로 만든 알고리즘을 처리할 수 있다는 구조적 프로그래밍에 대해서 알아보세요.
		위키백과의 구조적프로그래밍 참조:
			https://ko.wikipedia.org/wiki/구조적_프로그래밍

	99. 학습정리
		- 시퀀스 데이터구조인 스트링과 리스트는 for ~ in 문법으로 아이템들을 순회할 수 있다.
		- 딕셔너리를 순회할 때는 key/value를 각각 또는 모두 사용해 순회 할 수 있다.
		- setdefault() 함수는 딕셔너리에 값을 추가하는 함수로써 여러군데 응용된다.
// ####################### 7교시 종료 ####################### //

// ####################### 8교시 시작 ####################### //
※ 함수
	함수의 정의와 사용
		> 함수의 개념과 사용문법에 대해서 알아본다.
	함수의 파리미터
		> 파라미터의 용도와 특별한 형태에 대해서 알아본다.

	- 함수는 왜 사용하나?
		프로그램 읽고 이해하기
		코드의 재사용
		생산성과 품질 향상

	- 함수의 두 가지 작업
		정의하기 : define
		호출하기 : call

		def tax(bill):
			"""Adds 8% tax to a restaurant bill."""
			bill *= 1.08
			print("With tax: %f" % bill)
			return bill

		meal_cost = 100
		meal_with_tax = tax(meal_cost)
		meal_with_tip = tip(meal_with_tax)

	- 함수의 정의
		함수 선언은 def로 시작
		함수의 시작과 끝은 들여쓰기(indentation)로 구분
		시작과 끝을 명시하지 않음
		함수 이름 뒤에 오는 ( ) 안에 함수로 전달하는 인자(파라미터)를 적음
			def times(a, b):
				print(a * b)		# 2줄로 구분

			times(3, 5)

	- Parameter 와 return (python에서는 무조건 return이 있고 없으면 None을 넘겨준다.)

	- Practice Makes Perfect!
		1. cube라는 이름의 함수를 만들어서 number라는 파라미터를 받는다.
		2. 파라미터로 받은 숫자를 세제곱하는 코드를 만든다(자기 숫자를 세번 곱한다.)
		3. by_three라는 두 번째 함수를 만들고 number라는 파라미터를 받는다
		4. 그 숫자가 3으로 나누어지면 cube함수를 호출해서 결과를 넘겨주고, 그렇지 않으면 false를 리턴한다.

	- 함수 파라미터
		위치 파라미터
		키워드 파라미터

		def connect_URI(server, post):
			str = 'http://' + server + ':' + port
			return str

		connect_URI('test.com', '8080)								# 위치기반 파라미터
		connect_URI(port='8080', server='test.com')		# 키워드기반 파라미터

		connect_URI('test.com', port='8080')
		connect_URI(port='8080', 'test.com')


	- 기본 파라미터 값 지정
		파라미터에 기본값을 지정할 수 있다.
		함수를 호출할 때 파라미터를 제공하지 않으면 기본값을 사용한다.
			def times(a=10, b=20):
				return a * b

			x = times()
			y = times(5)

	- 함수 파라미터 : 가변 파라미터
		def var_param_test(*p):
			return p

		a = var_param_test(1,2,3,4,5)


		def_var_param_test(**p)
			for x,v in p.items():
				print(x,v)

		var_param_test(a=1, b=2, c=3, d=4)

	- 리턴 값 return
		함수를 종료하고 해당 함수를 호출한 곳으로 돌아감
		함수를 실행할 때 모든 함수 관련 리소스(변수 포함)를 스택에 저장 return 시 스택에서 제거
		파이썬은 다중값을 리턴값으로 전달 가능 (실제 튜플에 저장되어 리턴됨)
		return을 사용하지 않거나, return만 적었을 때도 함수가 종료 (None 객체를 돌려줌)

		def swap(a,b):
			return b,a

		a = swap(1,2)
		x, y = swap(1,2)

		type(a)

	- 함수의 사용이 어플리케이션의 품질향상에 어떻게 도움을 줄수 있을까요?
		함수는 재사용성을 높여준다.
		재사용성은 기존의 개발된 코드를 재사용하기에 생산성이 좋아지고,
		여러 군데에서 재사용하면서 코드가 검증이 수행되어 전체적으로 품질을 높여주는 효과가 있다.


	99. 학습정리
		- def키워드를 통해 함수를 정의할 수 있다.
		- 함수는 return 키워드를 만나면 함수의 수행이 종료된다.
		- return은 생략될 수 있으며 생략되면 None을 리턴한다.
		- 키워드 파라미터와 디폴트 파라미터는 자주 사용되며, 편리한 기능이다.

// ####################### 8교시 종료 ####################### //

// ####################### 9교시 시작 ####################### //
※ 모듈과 pip
	모듈의 개념과 사용
		>> 파이썬에서 모듈 개념을 알아보고 사용법을 알아본다.
	pip
		>> pip명령어를 사용해서 외부 모듈을 설치하는 방법을 알아본다.

	모듈은 자주사용하는 코드를 모아놓은 외부 라이브러리이다.
	외부모듈은 pip 명령어로 자동 다운로드 및 설치된다. (모듈 중앙저장소를 통해 모듈 자동 다운로드 및 설치를 지원한다.)

	모듈
		- 프로그램이 복잡해 질수록 한 파일로 프로그램을 유지하기가 힘들어짐
		- 파이썬 모듈로 분리해서 프로그램 좀 더 구조화 할 수 있음
			파이썬 파일로 별도로 분리
			import 문을 통해 모듈 사용
			>>> import random

			>>> ticket = random.randint(1, 1000)
			>>> print(ticket)


			>>> import math
			>>> answer = math.sqrt(3)
			>>> print(answer)

		- 모듈을 import하는 세 가지 방법
			import os
			from os import listdir
			import os as winos

		- 모듈 만들기
			def cal_upper(price):
				incrememt = price * 0.3
				upper_price = price + increment
				return uppper_price

			def cal_lower(price):
				decrement = price * 0.3
				lower_price = price - decrement
				return lower_price

			author = 'pystock'

			# 위코드 stock.py로 저장
			# stock.cal_upper 등으로 호출

	- 코어모듈 : 파이썬 설치 시 제공되는 내장 모듈
		>>> import sys
		>>> sys.path		# 를 통해 모듈이 설치된 경로를 확인할 수 있음

	- 써드파티 모듈 : 외부 모듈로서 별도로 설치가 필요함
		파이썬 커뮤니티에 의해 지금도 계속 개발되고 배포되고 있음

	- javascript -> node, npm
	- javascript -> maven

	- 써드파티 모듈 설치 관리자 : pypi	(파이썬 패키지 인스톨러)
		파이썬 모듈 중앙 저장소
		https://pypi.python.org/pypi
		비교해 보기 : 자바 중앙 저장소, 자바스크립트(노드), 중앙 저장소

	- requests 모듈은 파이썬에 내장되어 있지 않다.
		pip을 사용해서 설치해야 한다.
		>>> pip install requests		# 터미널에서 해야한다.
		# pip은 패키지 매니저로 파이썬 설치 시 같이 설치된다.

	- pip 설치확인 및 버전확인
		> pip --version
		> pip install requests

	- 패키지, package
		모듈 : 함수와 클래스를 정리해서 파일로 분리시키는 방법
		패키지 : 여러 모듈을 정리하는 방법을 제공
		파이썬 패키지는 모듈을 모아놓은 디렉터리
			# __init__.py 파일이 디렉터리에 위치하면 파이썬은 패키지로 인신
			# import는 from ... import 문법을 사용		(from os import listdir)

	- 모듈과 패키지를 사용하여 프로그램을 구조화 예제
		End User	<->	Web Interface	<->		Backend

	- 데모 : 패키지
		이전에 작성한 calculator.py 모듈을 services패키지를 만ㄷ르어 해당 패키지로 이동
		main.py 모듈을 실행 가능하게 수정

	- 둘중에 하나 선택해서 쓰자
		from services import calculator as cal
		import services.calculator as cal

	- 파이썬 내장 함수
		자주 사용되는 함수들을 내장 함수 (Built-in Functions)라는 이름으로 기본적으로 제공

	- activestate 사이트에서 작은 코드 예제를 많이 찾을 수 있다.
		http://code.activestate.com/recipes/langs/python

	- 다양한 내장 함수의 사용 예

	- 모듈러 프로그래밍 이란?
		네이버 국어사전 : 프로그램을 부품처럼 설계하는 방법.
		프로그램을 모듈화하여 독립성을 갖도록 함으로써 다른 모듈에
		영향을 받는 일이 없이 일부 모듈의 개량이나 재번역이 가능하다.

	99. 학습정리
		- 프로그램이 커짐에 따라 파일로 분리하여 개발할 수 있다.
		- 모듈은 파이썬 설치시 같이 설치되는 코어 모듈과 pip 명령어로
			별도로 설치해서 사용할 수 있는 써드파트 모듈로 분류된다.
		- 관련있는 파일들을 모아두는 디렉토리로 패키지를 사용할 수 있다.
// ####################### 9교시 종료 ####################### //


// ####################### 10교시 시작 ####################### //
※ 문자 다루기 2
	- 문자 다루기 관련 함수
		문자를 다루는 여러가지 함수와 방법에 대해서 알아본다.

	- 문자열 길이 len()
	- 문자열 나누기 : split()
	- 문자열 결합 : join()
		>>> crypto_list = ['a', 'b', 'c']
		>>> crypto_string = ', '.join(crypto_list)
		>>> crypto_string
			a, b, c

	- in, not in 연산자
		>>> 'Hello' in 'Hello World'
			True
		>>> 'Hello' not in 'Hello World'
			False

	- upper(), lower(), isupper(), islower() 함수
		upper() : 대문자변환
		lower() : 소문자변환
		isupper() : 전체 대문자냐?
		islower() : 전체 소문자냐?

	- isX 문자열 함수 (입력 유효성 체크로 사용)
		isalpha() : 문자로만 구성 시 True
		isalnum() : 문자와 숫자로만 구성시 True
		isdecimal() : 숫자로만 구성 시 True
		isspace() : 공백으로만 구성 시 True
		istitle() : 대문자로 시작 문장 형식이면 True

	- 패스워드 검증기
		1. input() 함수로 사용자로부터 패스워트를 입력 받는다.
		2. 패스워드 규칙
			8자 이상이고, 영어와 숫자가 혼합된 형태이어야 함
		3. 입력된 패스워드가 규칙에 맞으면 True, 틀리면 False를 리턴한다.
		4. 패스워드를 검증하는 부분을 별도의 함수로 작성하고, 최종적으로 적절한 메시지를 출력한다.
			def validate_password(password=''):
					if len(password) < 8:
							return False
					elif password.isalpha():
							return False
					elif password.isnumeric():
							return False
					else:
							return True



			def main():
					user_password = input('input your password: ')

					if validate_password(user_password):
							print('valid password')
					else:
							print('not valid password')


			main()

	- startswith(), endswith() 함수
		>>> 'Hello world!'.startswith('Hello')
			True
		>>> 'Hello world!'.endswith('Hello')
			False

	- 포매팅
		데이터 값을 문자열에 끼워 넣는 (interpolate)방법을 제공

	- 파이썬2 버전의 포매팅
		옛 스타일 : %
			>>> 'my home is %s gu %s dong %d bunji' % (gu, dong, bunji)
			>>> 'my home is %s gu %s dong %d bunji' % ('gu', 'dong', 123)

	- 파이썬 3 버전의 포매팅
		새로운 스타일 : { } 와 format
		파이썬 2방식도 지원되나 파이썬 3에서는 새로운 방식 포매팅을 권장
			>>> '{} {} {}'.format(gu, dong, bunji)
			>>> '{2} {0} {1}'.format(gu, dong, bunji)																		# 파라미터 순서 정할 수 있다.
			>>> '{gu} {dong} {bunji}'.format(gu='seocho', dong='yangjae', bunji=123)		# 제일 직관적이다

			>>> d = {'gu': 'seocho', 'dong': 'yangjae', 'bunji': 123}										# dictionary 형태로 바인딩 가능
			>>> '{0[gu]} {0[dong]} {0[bunji]}'.format(d)

	- pyperclip 모듈
		copy(), paste() 함수로 텍스트를 클립보드에 복사하고 붙이기를 지원
		>>> import pyperclip			# pip install pyperclip 해야한다.
		>>> pyperclip.copy('Hello world!')
		>>> pyperclip.paste()
			'Hello world!'

	- Terminal	(기존에 깔린거 확인할떄)
		>>> pip list

	- 연습문제 : Password Locker
		사이트와 패스워드를 딕셔너리에 저장해 두고, 사이트를 커맨드라인으로 전달하면 패스워드를 클립보드에 자동으로 복사해준다.
		1. 데이터 구조 정의
			PASSWORDS = {
				'gmail': 'gmail123',
				'naver': 'naver123',
				'facebook': 'facebook123',
			}

		2. input() 함수로 사이트 명을 입력 받는다.
		3. 해당 패스워드를 클립보드에 복사한다.
		4. 붙혀넣기로 패스워드를 사용한다.

	[빅데이터 분석] 텍스트마이닝이란?
		https://m.blog.naver.com/PostView.nhn?blogId=koys007&logNo=220932161947&proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F

	문자열로 구성된 문서에서 특정 데이터나 정보를 추출하는 것을 텍스트마이닝이라고 한다.
	텍스트마이닝에 대해서 조사해 보세요.
		>>> 비정형 텍스트 데이터에서 가치와 의미가 있는 정보를 찾아내는 기법.
				예들 들면, 인터넷 등에 올라온 글에서 특정 주제와 관련된 부분을 뽑아 의미를 분석하고
				필요한 정보를 추출하는 기법을 말한다.
				데이터 마이닝이 구조화되고 사실적인 방대한 데이터베이스에서 관심있는 패턴을 찾아내는 기술 분야라면,
				텍스트 마이닝은 구조화되지 않은 텍스트에서 의미를 찾아내는 기술분이야다.


	99. 학습정리
		- split()과 join() 함수를 통해 각각 문자열을 리스트로 리스트를 문자열로 변환할 수 있다.
		- 문자열과 리스트, 튜플 같이 아이템이 순서를 가지는 형태의 구조를 시퀀셜 타입이라고 한다.
		- isX함수들을 통해 스트링의 구성요소를 알수 있다.
// ####################### 10교시 종료 ####################### //

// ####################### 11교시 시작 ####################### //
※ 정규표현식1
	- 정규표현식 문법
		정규표현식의 개념과 문법을 알아본다.

	- 정규식 : Regular Expression
	- 텍스트를 검색할 때 Ctrl+F로 찾는 것을 조금 더 발전시킨 형태
		글자 자체를 가지고 찾는게 아니라 패턴이라는 것을 사용함
		오피스 프로그램은 찾기(바꾸기) 기능에서 정규식을 지원함

	- 정규식 사용 사례
		입력 유효성 체크(Form Validation)
			> 이메일 주소가 맞는지 아닌지
		텍스트에서 특정 부분을 추출
			> 우편번호 추출
		특정 텍스트 바꾸기
			> 계란 -> 달걀
		큰 텍스트를 작게 쪼개기
			> 콤마나 점으로 구분해서 문장 쪼개기

	- 정규식 문법 배우기
		/ ... / 속에 패턴을 표기

	- 패턴으로 찾기 데모 : 다음 두 개의 패턴으로 정규식을 배우자!
		010-3456-0123
			> 전화번호 패턴 나타내기
		kang.deokjoon@naver.com
			> 이메일 주소 패턴 나타내기

	- 정규식 연습하기 (https://regex101.com)
		> 아래는 실제 정규식
			010|011										# | 은 또는
			\d	# 숫자 1개
			\d\d\d-\d\d\d\d-\d\d\d\d
			[1]\d\d-									# 1로시작하면서 숫자 2개인것은?
			[0][0-9][0|1|6|9]-				# 0으로시작하고 0~9까지 & 0,1,6,9이면서 - 로 시작하는것
			[0]\d\d(-|\.)\d\d\d\d			# (-|\.)     >>> - or .
			[0]\d\d(-|\.)....-....		# .					>>> \n을 제외한 모든 문자

	- 참고사이트 @@@
		https://regex101.com
		https://regexr.com

	1. 전화번호 패턴
		>> \d\d\d-\d\d\d\d-\d\d\d\d

		- \d : 0부터 9까지 숫자
		- \w : 숫자와 문자(대소문자 포함), _(언더스코어)
		- \s : 공백문자
		- . : \n을 제외한 모든 문자

	1. 전화번호
		- [] 속에 글자들은 순서에 관계없이 한 글자를 표현
		- [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]
		- 다른 표현 : [0][1][01689]-[0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]

	1. 전화번호
		- [0-9]{3}-[0-9]{4}-[0-9]{4}
		- ? : 0번 또는 1번 발생 (zero or one)
		- * : 0번 또는 여러번 발생 (zero or many)
		- + : 1번 이상 발생 (one or many)
		- {n} : n번 발생

	2. 이메일 주소 패턴
		- [a-zA-Z0-9._%+-]		# 사용자 이름
		- @										# @ 심벌
		- [a-zA-Z0-9.-]+			# 도메인명
		- \.(com|net|co.kr)		# dot something
		- |(파이프)							# 다중매칭

	9. 연습문제 : 웹 주소 패턴 표현하기
		- \b(https?:\/\/)?([\w.]+){1,2}(\.[\w]{2,4}){1,2}\b
				>>>>>>>>>> https? 는 http일수도 있고, http일수도 있다
				>>>>>>>>>> (https?:\/\/)? 는 아에 http로 시작하는게 있을수도 없을수도 있다.

			/	문자를 표현할떄	: 이스케이프를 사용 (\/)
			\b						: 바운더리를 표현	(양쪽에 아무문자가 없다)
			()						: 괄호를 사용하여 그룹을 적절히 활용
			.							: 문자(dot)는 와일드카드, \n 문자 제외하고 모든 문자에 대응
			실제로 .을 표시하고 싶으면 \.으로 사용
			^							: 시작을 표시
			$							: 끝을 표시


	1. 정규식을 사용한 텍스트 패턴 검색
		- match() : 원하는 문자열 패턴으로 소스 문자열과 일치하는지 비교
			result = re.match('hello', 'hello world')		# 'hello'는 패턴이고 'hello world'는 확인 할 소스 문자열이다

		- result : 결과가 None이면 매칭이 실패했다는 의미

	2. 패턴을 미리 컴파일 할 수 있다.
		phonenum_regex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')

	3. 패턴과 소스를 비교하는 다른 방법
		search()	: 첫 번째 일치하는 객체를 반환
		findall()	: 모두 일치하는 문자열을 리스트로 반환
		split()		: 패턴에 맞게 소스를 쪼갠 후 문자열 조각의 리스트를 반환
		sub()			: 바꾸기 기능, 패턴과 일치하는 소스의 부분을 대체인자로 변경

	4. 정규식의 역사에 대해서 알아보세요.
		정규 표현식은 스티븐 클레이니가 정규 집합(regular set)이라는 자신의 수학적 개념을 이용하여 정규 언어를 기술한 1956년이 기원이다.
		[2] 형식 언어와 관련된 오토마타 이론의 하위 분야이자 이론 전산학에서 발생하였다.
		패턴 일치의 초기 구현체들에는 SNOBOL 언어가 있으며, 실제로 정규식을 사용한 것은 아니지만 대신 독자적인 패턴 일치 구성체를 이용하였다.
		(위키백과 정규식중)

	99. 학습정리
		- 정규식을 사용하면 패턴을 이용하여 문서내의 특정 문자를 추출 할 수 있다.
		- 정규식을 췝 상에서 테스트 해 볼수 있는 사이트를 이용하여 정규식을 학습할 수 있다.

// ####################### 11교시 종료 ####################### //




// ####################### 2교시 시작 ####################### //
※
// ####################### 2교시 종료 ####################### //
