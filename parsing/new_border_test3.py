import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import json, os, traceback
import math
from core import test_calcu as calcu

x_list = np.array(
    [67.6119, 69.4202, 69.6362, 69.9784, 70.1925, 70.424, 70.6564, 70.8728, 71.1199, 71.3872, 71.655, 71.9038, 72.1467,
     72.4088, 72.6712, 72.9148, 73.1676, 73.4406, 73.7139, 73.9677, 74.1764, 74.4015, 74.6264, 74.8344, 74.9576,
     75.0879, 75.2227, 75.3596, 75.496, 75.6294, 75.7573, 75.8773, 75.9818, 76.0919, 76.2052, 76.3195, 76.4327, 76.5424,
     76.6465, 76.7427, 76.829, 76.9185, 77.0094, 77.0996, 77.1873, 77.2705, 77.3472, 77.4154, 77.4634, 77.5173, 77.628,
     77.7533, 90.6457, 90.7046, 90.7566, 90.8106, 90.8452, 90.8619, 90.875, 90.8854, 90.8936, 90.906, 90.9261, 90.9427,
     90.9261, 90.906, 90.8936, 90.8855, 90.875, 90.8619, 90.8451, 90.8106, 90.7566, 90.7046, 90.6457, 77.7533, 77.628,
     77.5173, 77.4634, 77.4154, 77.3472, 77.2704, 77.1873, 77.0996, 77.0093, 76.9184, 76.8289, 76.7427, 76.6466,
     76.5424, 76.4326, 76.3194, 76.2049, 76.0916, 75.9816, 75.8773, 75.7575, 75.6297, 75.4963, 75.3598, 75.2228,
     75.0879, 74.9576, 74.8344, 74.7336, 74.6264, 74.4016, 74.1765, 73.9677, 73.7139, 73.4407, 73.1677, 72.9148,
     72.6711, 72.4088, 72.1467, 71.9038, 71.655, 71.3872, 71.1199, 70.8728, 70.6564, 70.424, 70.1924, 69.9784, 69.6362,
     69.4202, 67.6119, 67.7934, 67.9464, 68.0753, 68.1841, 68.2982, 68.4095, 68.5096, 68.591, 68.6752, 68.756, 68.8273,
     68.8701, 68.9137, 68.9999, 69.0796, 69.1151, 69.1465, 69.1766, 69.2062, 69.2628, 69.3138, 69.3565, 69.3892,
     69.4209, 69.4493, 69.4719, 69.4833, 69.4934, 69.5089, 69.5184, 69.5268, 69.5351, 69.5268, 69.5184, 69.5089,
     69.4931, 69.4719, 69.4496, 69.421, 69.389, 69.3565, 69.3141, 69.2629, 69.2061, 69.1764, 69.1465, 69.1152, 69.0798,
     68.9998, 68.9135, 68.8273, 68.7562, 68.6752, 68.5908, 68.5096, 68.4098, 68.2985, 68.1842, 68.0753, 67.9464,
     67.7934

        , 67.6119
     ])

y_list = np.array(
    [44.0912, 48.9391, 48.876, 48.779, 48.7235, 48.6672, 48.6142, 48.5687, 48.5225, 48.4774, 48.4355, 48.3989, 48.3661,
     48.3334, 48.3028, 48.2765, 48.2527, 48.2315, 48.215, 48.2054, 48.2044, 48.2102, 48.2222, 48.2396, 48.2542, 48.2728,
     48.2951, 48.3204, 48.3481, 48.3778, 48.4089, 48.4407, 48.4716, 48.5075, 48.5476, 48.5913, 48.6378, 48.6866,
     48.7369, 48.7881, 48.8389, 48.8965, 48.9596, 49.0271, 49.0978, 49.1705, 49.2439, 49.3169, 49.3759, 49.4485,
     49.6083, 49.7999, 50.4797, 49.3695, 48.4334, 47.4462, 46.8792, 46.5849, 46.3119, 46.0069, 45.6781, 45.0441,
     43.7845, 40.0726, 36.3607, 35.1011, 34.4671, 34.1383, 33.8333, 33.5603, 33.266, 32.699, 31.7118, 30.7757, 29.6655,
     30.3453, 30.5369, 30.6967, 30.7693, 30.8283, 30.9013, 30.9747, 31.0473, 31.1179, 31.1854, 31.2485, 31.3062,
     31.3571, 31.4083, 31.4584, 31.5069, 31.5532, 31.5967, 31.6368, 31.6729, 31.7045, 31.737, 31.7682, 31.7977, 31.8251,
     31.8499, 31.8719, 31.8906, 31.9055, 31.9154, 31.9236, 31.9352, 31.9406, 31.9398, 31.9304, 31.9136, 31.892, 31.8687,
     31.8428, 31.8119, 31.7789, 31.7463, 31.7102, 31.6681, 31.6227, 31.5765, 31.531, 31.478, 31.4217, 31.3662, 31.2692,
     31.206, 36.054, 36.1932, 36.3134, 36.4195, 36.5174, 36.6265, 36.7386, 36.8454, 36.9391, 37.0431, 37.1497, 37.2513,
     37.3175, 37.389, 37.5418, 37.698, 37.7738, 37.8462, 37.9217, 38.0027, 38.1744, 38.3479, 38.5101, 38.6504, 38.8024,
     38.9551, 39.0973, 39.1886, 39.2873, 39.478, 39.6461, 39.8421, 40.0726, 40.3031, 40.4991, 40.6672, 40.8578, 41.0479,
     41.1902, 41.3428, 41.4948, 41.6351, 41.7973, 41.9708, 42.1424, 42.2234, 42.299, 42.3714, 42.4472, 42.6033, 42.756,
     42.8939, 42.9955, 43.102, 43.2059, 43.2998, 43.4068, 43.5189, 43.6279, 43.7257, 43.8317, 43.9519

        , 44.0912
     ])

data_main_polyline = [{"x":67.6119,"y":44.0912},{"x":69.4202,"y":48.9391},{"x":69.6362,"y":48.876},{"x":69.9784,"y":48.779},{"x":70.1925,"y":48.7235},{"x":70.424,"y":48.6672},{"x":70.6564,"y":48.6142},{"x":70.8728,"y":48.5687},{"x":71.1199,"y":48.5225},{"x":71.3872,"y":48.4774},{"x":71.655,"y":48.4355},{"x":71.9038,"y":48.3989},{"x":72.1467,"y":48.3661},{"x":72.4088,"y":48.3334},{"x":72.6712,"y":48.3028},{"x":72.9148,"y":48.2765},{"x":73.1676,"y":48.2527},{"x":73.4406,"y":48.2315},{"x":73.7139,"y":48.215},{"x":73.9677,"y":48.2054},{"x":74.1764,"y":48.2044},{"x":74.4015,"y":48.2102},{"x":74.6264,"y":48.2222},{"x":74.8344,"y":48.2396},{"x":74.9576,"y":48.2542},{"x":75.0879,"y":48.2728},{"x":75.2227,"y":48.2951},{"x":75.3596,"y":48.3204},{"x":75.496,"y":48.3481},{"x":75.6294,"y":48.3778},{"x":75.7573,"y":48.4089},{"x":75.8773,"y":48.4407},{"x":75.9818,"y":48.4716},{"x":76.0919,"y":48.5075},{"x":76.2052,"y":48.5476},{"x":76.3195,"y":48.5913},{"x":76.4327,"y":48.6378},{"x":76.5424,"y":48.6866},{"x":76.6465,"y":48.7369},{"x":76.7427,"y":48.7881},{"x":76.829,"y":48.8389},{"x":76.9185,"y":48.8965},{"x":77.0094,"y":48.9596},{"x":77.0996,"y":49.0271},{"x":77.1873,"y":49.0978},{"x":77.2705,"y":49.1705},{"x":77.3472,"y":49.2439},{"x":77.4154,"y":49.3169},{"x":77.4634,"y":49.3759},{"x":77.5173,"y":49.4485},{"x":77.628,"y":49.6083},{"x":77.7533,"y":49.7999},{"x":90.6457,"y":50.4797},{"x":90.7046,"y":49.3695},{"x":90.7566,"y":48.4334},{"x":90.8106,"y":47.4462},{"x":90.8452,"y":46.8792},{"x":90.8619,"y":46.5849},{"x":90.875,"y":46.3119},{"x":90.8854,"y":46.0069},{"x":90.8936,"y":45.6781},{"x":90.906,"y":45.0441},{"x":90.9261,"y":43.7845},{"x":90.9427,"y":40.0726},{"x":90.9261,"y":36.3607},{"x":90.906,"y":35.1011},{"x":90.8936,"y":34.4671},{"x":90.8855,"y":34.1383},{"x":90.875,"y":33.8333},{"x":90.8619,"y":33.5603},{"x":90.8451,"y":33.266},{"x":90.8106,"y":32.699},{"x":90.7566,"y":31.7118},{"x":90.7046,"y":30.7757},{"x":90.6457,"y":29.6655},{"x":77.7533,"y":30.3453},{"x":77.628,"y":30.5369},{"x":77.5173,"y":30.6967},{"x":77.4634,"y":30.7693},{"x":77.4154,"y":30.8283},{"x":77.3472,"y":30.9013},{"x":77.2704,"y":30.9747},{"x":77.1873,"y":31.0473},{"x":77.0996,"y":31.1179},{"x":77.0093,"y":31.1854},{"x":76.9184,"y":31.2485},{"x":76.8289,"y":31.3062},{"x":76.7427,"y":31.3571},{"x":76.6466,"y":31.4083},{"x":76.5424,"y":31.4584},{"x":76.4326,"y":31.5069},{"x":76.3194,"y":31.5532},{"x":76.2049,"y":31.5967},{"x":76.0916,"y":31.6368},{"x":75.9816,"y":31.6729},{"x":75.8773,"y":31.7045},{"x":75.7575,"y":31.737},{"x":75.6297,"y":31.7682},{"x":75.4963,"y":31.7977},{"x":75.3598,"y":31.8251},{"x":75.2228,"y":31.8499},{"x":75.0879,"y":31.8719},{"x":74.9576,"y":31.8906},{"x":74.8344,"y":31.9055},{"x":74.7336,"y":31.9154},{"x":74.6264,"y":31.9236},{"x":74.4016,"y":31.9352},{"x":74.1765,"y":31.9406},{"x":73.9677,"y":31.9398},{"x":73.7139,"y":31.9304},{"x":73.4407,"y":31.9136},{"x":73.1677,"y":31.892},{"x":72.9148,"y":31.8687},{"x":72.6711,"y":31.8428},{"x":72.4088,"y":31.8119},{"x":72.1467,"y":31.7789},{"x":71.9038,"y":31.7463},{"x":71.655,"y":31.7102},{"x":71.3872,"y":31.6681},{"x":71.1199,"y":31.6227},{"x":70.8728,"y":31.5765},{"x":70.6564,"y":31.531},{"x":70.424,"y":31.478},{"x":70.1924,"y":31.4217},{"x":69.9784,"y":31.3662},{"x":69.6362,"y":31.2692},{"x":69.4202,"y":31.206},{"x":67.6119,"y":36.054},{"x":67.7934,"y":36.1932},{"x":67.9464,"y":36.3134},{"x":68.0753,"y":36.4195},{"x":68.1841,"y":36.5174},{"x":68.2982,"y":36.6265},{"x":68.4095,"y":36.7386},{"x":68.5096,"y":36.8454},{"x":68.591,"y":36.9391},{"x":68.6752,"y":37.0431},{"x":68.756,"y":37.1497},{"x":68.8273,"y":37.2513},{"x":68.8701,"y":37.3175},{"x":68.9137,"y":37.389},{"x":68.9999,"y":37.5418},{"x":69.0796,"y":37.698},{"x":69.1151,"y":37.7738},{"x":69.1465,"y":37.8462},{"x":69.1766,"y":37.9217},{"x":69.2062,"y":38.0027},{"x":69.2628,"y":38.1744},{"x":69.3138,"y":38.3479},{"x":69.3565,"y":38.5101},{"x":69.3892,"y":38.6504},{"x":69.4209,"y":38.8024},{"x":69.4493,"y":38.9551},{"x":69.4719,"y":39.0973},{"x":69.4833,"y":39.1886},{"x":69.4934,"y":39.2873},{"x":69.5089,"y":39.478},{"x":69.5184,"y":39.6461},{"x":69.5268,"y":39.8421},{"x":69.5351,"y":40.0726},{"x":69.5268,"y":40.3031},{"x":69.5184,"y":40.4991},{"x":69.5089,"y":40.6672},{"x":69.4931,"y":40.8578},{"x":69.4719,"y":41.0479},{"x":69.4496,"y":41.1902},{"x":69.421,"y":41.3428},{"x":69.389,"y":41.4948},{"x":69.3565,"y":41.6351},{"x":69.3141,"y":41.7973},{"x":69.2629,"y":41.9708},{"x":69.2061,"y":42.1424},{"x":69.1764,"y":42.2234},{"x":69.1465,"y":42.299},{"x":69.1152,"y":42.3714},{"x":69.0798,"y":42.4472},{"x":68.9998,"y":42.6033},{"x":68.9135,"y":42.756},{"x":68.8273,"y":42.8939},{"x":68.7562,"y":42.9955},{"x":68.6752,"y":43.102},{"x":68.5908,"y":43.2059},{"x":68.5096,"y":43.2998},{"x":68.4098,"y":43.4068},{"x":68.2985,"y":43.5189},{"x":68.1842,"y":43.6279},{"x":68.0753,"y":43.7257},{"x":67.9464,"y":43.8317},{"x":67.7934,"y":43.9519}
                    , {"x":67.6119,"y":44.0912}
                    ]
data_biggest_polyline = [{"x":67.313,"y":44.0053},{"x":69.2673,"y":49.2444},{"x":69.4904,"y":49.1791},{"x":69.7046,"y":49.1165},{"x":70.0438,"y":49.0203},{"x":70.2539,"y":48.9659},{"x":70.4811,"y":48.9106},{"x":70.7092,"y":48.8586},{"x":70.9215,"y":48.8139},{"x":71.1654,"y":48.7684},{"x":71.4293,"y":48.7238},{"x":71.6936,"y":48.6825},{"x":71.9392,"y":48.6464},{"x":72.1797,"y":48.6139},{"x":72.4393,"y":48.5815},{"x":72.6992,"y":48.5513},{"x":72.9405,"y":48.5252},{"x":73.1885,"y":48.5018},{"x":73.4563,"y":48.481},{"x":73.7243,"y":48.4648},{"x":73.9732,"y":48.4553},{"x":74.1746,"y":48.4544},{"x":74.3916,"y":48.46},{"x":74.6085,"y":48.4715},{"x":74.8091,"y":48.4884},{"x":74.9273,"y":48.5023},{"x":75.0524,"y":48.5202},{"x":75.1818,"y":48.5416},{"x":75.3131,"y":48.5659},{"x":75.444,"y":48.5925},{"x":75.5721,"y":48.621},{"x":75.6948,"y":48.6509},{"x":75.8099,"y":48.6815},{"x":75.9078,"y":48.7104},{"x":76.0109,"y":48.744},{"x":76.117,"y":48.7815},{"x":76.2241,"y":48.8223},{"x":76.3301,"y":48.8658},{"x":76.4329,"y":48.9114},{"x":76.5304,"y":48.9584},{"x":76.6205,"y":49.0062},{"x":76.6981,"y":49.0519},{"x":76.7786,"y":49.1039},{"x":76.8602,"y":49.1608},{"x":76.9413,"y":49.2217},{"x":77.0202,"y":49.2853},{"x":77.0953,"y":49.3505},{"x":77.1648,"y":49.4162},{"x":77.227,"y":49.4813},{"x":77.2688,"y":49.5304},{"x":77.3105,"y":49.5846},{"x":77.3927,"y":49.7021},{"x":77.5428,"y":49.9349},{"x":77.6115,"y":50.0427},{"x":91.2566,"y":50.7623},{"x":91.2699,"y":50.5128},{"x":91.3287,"y":49.4033},{"x":91.3806,"y":48.4675},{"x":91.4346,"y":47.4831},{"x":91.4694,"y":46.9104},{"x":91.4863,"y":46.6133},{"x":91.4995,"y":46.3376},{"x":91.51,"y":46.0292},{"x":91.5183,"y":45.6967},{"x":91.5309,"y":45.0557},{"x":91.5511,"y":43.7906},{"x":91.5677,"y":40.0754},{"x":91.5511,"y":36.3546},{"x":91.5309,"y":35.0895},{"x":91.5183,"y":34.4484},{"x":91.5101,"y":34.1159},{"x":91.4995,"y":33.8076},{"x":91.4862,"y":33.5319},{"x":91.4693,"y":33.2348},{"x":91.4346,"y":32.6622},{"x":91.3806,"y":31.6777},{"x":91.3287,"y":30.7419},{"x":91.2699,"y":29.6324},{"x":91.2566,"y":29.3829},{"x":77.6115,"y":30.1024},{"x":77.5428,"y":30.2103},{"x":77.4259,"y":30.3904},{"x":77.3225,"y":30.5404},{"x":77.272,"y":30.6086},{"x":77.227,"y":30.6639},{"x":77.1654,"y":30.7296},{"x":77.0962,"y":30.7955},{"x":77.0212,"y":30.8608},{"x":76.942,"y":30.9242},{"x":76.8606,"y":30.9848},{"x":76.7786,"y":31.0415},{"x":76.6979,"y":31.0933},{"x":76.6202,"y":31.1392},{"x":76.53,"y":31.1871},{"x":76.4323,"y":31.234},{"x":76.3293,"y":31.2794},{"x":76.223,"y":31.3227},{"x":76.1156,"y":31.3633},{"x":76.0093,"y":31.4009},{"x":75.9061,"y":31.4346},{"x":75.8082,"y":31.4642},{"x":75.6934,"y":31.4954},{"x":75.5707,"y":31.5253},{"x":75.4428,"y":31.5535},{"x":75.3119,"y":31.5798},{"x":75.1805,"y":31.6036},{"x":75.0511,"y":31.6247},{"x":74.9261,"y":31.6426},{"x":74.8079,"y":31.6569},{"x":74.7108,"y":31.6664},{"x":74.6075,"y":31.6743},{"x":74.3909,"y":31.6855},{"x":74.1739,"y":31.6906},{"x":73.9727,"y":31.6898},{"x":73.7237,"y":31.6806},{"x":73.4556,"y":31.664},{"x":73.1877,"y":31.6429},{"x":72.9395,"y":31.6199},{"x":72.6981,"y":31.5942},{"x":72.4382,"y":31.5637},{"x":72.1786,"y":31.5309},{"x":71.938,"y":31.4986},{"x":71.6927,"y":31.463},{"x":71.4286,"y":31.4216},{"x":71.1651,"y":31.3769},{"x":70.9215,"y":31.3313},{"x":70.7092,"y":31.2866},{"x":70.4811,"y":31.2345},{"x":70.2539,"y":31.1792},{"x":70.0438,"y":31.1249},{"x":69.7667,"y":31.0468},{"x":69.4904,"y":30.9661},{"x":69.2673,"y":30.9008},{"x":67.313,"y":36.1399},{"x":67.4597,"y":36.2523},{"x":67.6369,"y":36.3881},{"x":67.7863,"y":36.5054},{"x":67.9121,"y":36.6089},{"x":68.0153,"y":36.7018},{"x":68.1236,"y":36.8054},{"x":68.2291,"y":36.9118},{"x":68.3242,"y":37.0131},{"x":68.3997,"y":37.1001},{"x":68.4779,"y":37.1966},{"x":68.553,"y":37.2956},{"x":68.6192,"y":37.3898},{"x":68.6996,"y":37.5179},{"x":68.7798,"y":37.66},{"x":68.8539,"y":37.8053},{"x":68.8868,"y":37.8758},{"x":68.9161,"y":37.9431},{"x":68.9444,"y":38.0145},{"x":68.9723,"y":38.091},{"x":69.0256,"y":38.2532},{"x":69.0736,"y":38.4171},{"x":69.1139,"y":38.5703},{"x":69.1452,"y":38.7046},{"x":69.1755,"y":38.8501},{"x":69.2027,"y":38.9962},{"x":69.2243,"y":39.1324},{"x":69.2352,"y":39.2194},{"x":69.2448,"y":39.3135},{"x":69.2595,"y":39.4953},{"x":69.2687,"y":39.6584},{"x":69.2769,"y":39.8488},{"x":69.285,"y":40.0726},{"x":69.2769,"y":40.2964},{"x":69.2687,"y":40.4867},{"x":69.2595,"y":40.6498},{"x":69.2444,"y":40.8324},{"x":69.2241,"y":41.0145},{"x":69.2027,"y":41.1505},{"x":69.1754,"y":41.2963},{"x":69.1447,"y":41.4416},{"x":69.1137,"y":41.5757},{"x":69.0736,"y":41.7293},{"x":69.0252,"y":41.8935},{"x":68.9715,"y":42.056},{"x":68.9434,"y":42.1327},{"x":68.9151,"y":42.2043},{"x":68.8861,"y":42.2715},{"x":68.8532,"y":42.3417},{"x":68.779,"y":42.4865},{"x":68.6988,"y":42.6281},{"x":68.6188,"y":42.7559},{"x":68.5527,"y":42.8503},{"x":68.4774,"y":42.9491},{"x":68.399,"y":43.0456},{"x":68.3236,"y":43.1328},{"x":68.229,"y":43.2343},{"x":68.1237,"y":43.3405},{"x":68.0155,"y":43.4438},{"x":67.9121,"y":43.5363},{"x":67.8054,"y":43.6247},{"x":67.6881,"y":43.7172},{"x":67.4597,"y":43.8928}
                       , {"x":67.313,"y":44.0053}
                       ]

def test1():
    """
    다각형의 최소/최대 4점을 알면 중심점을 구할 수 있습니다.
    x1 : 다각형의 x 좌표 중 가장 작은 값
    y1 : 다각형의 y 좌표 중 가장 작은 값
    x2 : 다각형의 x 좌표 중 가장 큰 값
    y2 : 다각형의 y 좌표 중 가장 큰 값

    center.x = x1 + ((x2 - x1) / 2)
    center.y = y1 + ((y2 - y1) / 2)

    :return:
    """
    df_list1 = pd.DataFrame({"x": x_list, "y": y_list})

    minX = df_list1['x'].min()
    maxX = df_list1['x'].max()
    minY = df_list1['y'].min()
    maxY = df_list1['y'].max()
    # print("minX : %s maxX : %s minY : %s maxY : %s " % (minX, maxX, minY, maxY))

    center = {}
    center['x'] = minX + ((maxX - minX) / 2)
    center['y'] = minY + ((maxY - minY) / 2)
    # print("center : %s" % center)

    landmarks = {'neck': [127, 0], 'shoulder': [126, 1], 'hem': [74, 52], 'height': [159, 63], 'chest': [75, 51]}

    df_list2 = df_list1.copy()
    # df_list2 = pd.concat((df_list1.loc[0:1], df_list1.loc[75:]))
    # print("df_list2 : ", df_list2)
    # df_tem = pd.concat((df_ori.loc[index_aroundpoint[0]:], df_ori.loc[:target_index]))



    """
    print("landmarks : ", landmarks)
    index_flat = np.hstack(landmarks.values()).tolist()
    print("index_flat : ", index_flat)
    index_flat.sort()
    print("index_flat : ", index_flat)
    print(index_flat.index(127))
    print(index_flat[index_flat.index(127)])
    print("max(index_flat) : ", max(index_flat))
    """

    for key, landmark in landmarks.items():
        # print("key : %s, landmark : %s / %s" % (key, landmark[0], landmark[1]))
        # if key in ['neck', 'hem']:
        if key in ['neck']:
            # print("############## test : ", test)
            if landmark[1] == 0:
                # print("landmark : ", landmark)
                # print("max(landmark) : ", max(landmark))
                # print("len : ", df_list2)

                for idx in range(landmark[0], len(df_list2)):
                    """
                    inclination = calcu.get_inclination([center['x'], center['y']], df_list2.iloc[idx])
                    cal_point = calcu.testCal(inclination, df_list2.iloc[idx].x, df_list2.iloc[idx].y, 1)
                    df_list2.iloc[idx].x = cal_point['x2']
                    df_list2.iloc[idx].y = cal_point['y2']
                    """
                    continue

                # ============= 랜드마크 1 ~ 0 기준으로
                # 기울기
                print(df_list2.iloc[1])
                print(df_list2.iloc[0])
                inclination = calcu.get_inclination(df_list2.iloc[0], df_list2.iloc[1])
                # 예측 포인트
                cal_point = calcu.testCal(inclination, df_list2.iloc[0].x, df_list2.iloc[0].y, 0.3)

                # xxx = cal_point['x2'] - df_list2.iloc[0].x
                # yyy = cal_point['y2'] - df_list2.iloc[0].y
                xxx = 67.313 - df_list2.iloc[0].x
                yyy = 44.0053 - df_list2.iloc[0].y

                cur_grading_data = {'name': 'neck_depth', 'target_index': 0, 'grading_size': xxx, 'axis': 'x'}
                df_list2 = calcu.move_landmark(df_list2, landmarks,
                                               cur_grading_data["target_index"],
                                               cur_grading_data["grading_size"],
                                               cur_grading_data["axis"])

                cur_grading_data = {'name': 'neck_depth', 'target_index': 0, 'grading_size': yyy, 'axis': 'y'}
                df_list2 = calcu.move_landmark(df_list2, landmarks,
                                               cur_grading_data["target_index"],
                                               cur_grading_data["grading_size"],
                                               cur_grading_data["axis"])

                # ============= 랜드마크 126 ~ 127 기준으로
                # 기울기
                inclination = calcu.get_inclination(df_list2.iloc[126], df_list2.iloc[127])
                # 예측 포인트
                cal_point = calcu.testCal(inclination, df_list2.iloc[127].x, df_list2.iloc[127].y, 0.3)

                # xxx = cal_point['x2'] - df_list2.iloc[127].x
                # yyy = cal_point['y2'] - df_list2.iloc[127].y
                xxx = 70.7092 - df_list2.iloc[127].x
                yyy = 31.2866 - df_list2.iloc[127].y

                print("xxx : ", xxx)
                print("yyy : ", yyy)

                cur_grading_data = {'name': 'neck_depth', 'target_index': 127, 'grading_size': xxx, 'axis': 'x'}
                df_list2 = calcu.move_landmark(df_list2, landmarks,
                                               cur_grading_data["target_index"],
                                               cur_grading_data["grading_size"],
                                               cur_grading_data["axis"])

                cur_grading_data = {'name': 'neck_depth', 'target_index': 127, 'grading_size': yyy, 'axis': 'y'}
                df_list2 = calcu.move_landmark(df_list2, landmarks,
                                               cur_grading_data["target_index"],
                                               cur_grading_data["grading_size"],
                                               cur_grading_data["axis"])

                """
                이걸로 계속 테스트 함
                """
                cur_grading_data = {'name': 'neck_depth', 'target_index': 159, 'grading_size': -0.3, 'axis': 'x'}
                df_list2 = calcu.move_landmark(df_list2, landmarks,
                                              cur_grading_data["target_index"],
                                              cur_grading_data["grading_size"],
                                              cur_grading_data["axis"])


            else:
                # for idx in range(min(landmark), max(landmark)+1):
                #     # x_1 = df_list2.iloc[idx].x
                #     # y_1 = df_list2.iloc[idx].y
                #     # print("[%s] x_1 : %s, y_1 : %s" % (idx, x_1, y_1))
                #     df_list2.iloc[idx].x -= 1
                continue


    list1_x = df_list1.iloc[0].x
    list1_y = df_list1.iloc[0].y
    list2_x = df_list2.iloc[0].x
    list2_y = df_list2.iloc[0].y

    width = list1_x - list2_x
    height = list1_y - list2_y

    print("list1[x, y] : [%s, %s]" % (list1_x, list1_y))
    print("list2[x, y] : [%s, %s]" % (list2_x, list2_y))

    print("width : %s" % width)
    print("height : %s" % height)

    diagonal_length = math.sqrt(math.pow(width, 2) + math.pow(height, 2))
    print("diagonalLength : ", diagonal_length)

    # print("df_list1.iloc[159].x : ", df_list1.iloc[159].x)
    # print("df_list2.iloc[159].x : ", df_list2.iloc[159].x)

    print("neck-height : ", df_list1.iloc[159].x - df_list2.iloc[159].x)

    print("math.sqrt() : ", (math.sqrt(2)))

    print("df_biggest_polyline[127] : ", data_biggest_polyline[126])
    print("df_biggest_polyline[159] : ", data_biggest_polyline[158])
    print("df_biggest_polyline[0] : ", data_biggest_polyline[0])

    plt.plot('x', 'y', data=df_list1, marker='.', markerfacecolor='blue', markersize=3, color='skyblue', linewidth=1)
    plt.plot('x', 'y', data=df_list2, marker='.', markerfacecolor='olive', markersize=3, color='red', linewidth=1)

    df_main_polyline = pd.DataFrame(data_main_polyline)
    # df.plot(x='x', y='y', marker='.')
    plt.plot('x', 'y', data=df_main_polyline, marker='.', markerfacecolor='olive', markersize=3, color='black', linewidth=1)

    df_biggest_polyline = pd.DataFrame(data_biggest_polyline)
    plt.plot('x', 'y', data=df_biggest_polyline, marker='.', markerfacecolor='olive', markersize=3, color='blue', linewidth=1)

    plt.show()


def main():
    try:
        test1()

    except Exception as exp:
        print("########### Exception : %s" % str(exp))
        # app.logger.error("########### Exception : %s", str(exp))
        traceback.print_exc()


if __name__ == '__main__':
    main()

